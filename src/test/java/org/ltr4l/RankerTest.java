package org.ltr4l;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.ltr4l.nn.AbstractMLPBase;
import org.ltr4l.nn.NNMLP;
import org.ltr4l.nn.RankNetMLP;
import org.ltr4l.tools.Config;
import org.ltr4l.trainers.MLPTrainer;
import org.ltr4l.trainers.PRankTrainer;

import java.io.StringReader;

public class RankerTest {

  @Before
  public void setUp() throws Exception {

  }

  @Test
  public void rankerFactoryGetPRank() throws Exception {
    String pRankMod = "{\n" +
        "  \"config\" : {\n" +
        "    \"algorithm\" : \"PRank\",\n" +
        "    \"numIterations\" : 100,\n" +
        "    \"batchSize\" : 0,\n" +
        "    \"params\" : null,\n" +
        "    \"dataSet\" : {\n" +
        "      \"training\" : \"data/MQ2008/Fold1/train.txt\",\n" +
        "      \"validation\" : \"data/MQ2008/Fold1/vali.txt\",\n" +
        "      \"test\" : \"data/MQ2008/Fold1/test.txt\"\n" +
        "    },\n" +
        "    \"model\" : {\n" +
        "      \"format\" : \"json\",\n" +
        "      \"file\" : \"model/prank-model.json\"\n" +
        "    },\n" +
        "    \"evaluation\" : {\n" +
        "      \"evaluator\" : \"NDCG\",\n" +
        "      \"params\" : {\n" +
        "        \"k\" : 10\n" +
        "      }\n" +
        "    },\n" +
        "    \"report\" : {\n" +
        "      \"format\" : \"csv\",\n" +
        "      \"file\" : \"report/prank-report.csv\"\n" +
        "    }\n" +
        "  },\n" +
        "  \"weights\" : [ 1.0, 2.0, 3.0, 4.0, 5.0 ],\n" +
        "  \"thresholds\" : [ 15.0, 19.0 ]\n" +
        "}";

    StringReader reader = new StringReader(pRankMod);
    Ranker pRanker = Ranker.RankerFactory.getFromModel("PRank", reader);
    Assert.assertTrue(pRanker instanceof PRankTrainer.PRank);
  }

  @Test
  public void rankerFactoryGetOAP() throws Exception {
    String oapMod = "{\n" +
        "  \"config\" : {\n" +
        "    \"algorithm\" : \"OAP\",\n" +
        "    \"numIterations\" : 100,\n" +
        "    \"batchSize\" : 0,\n" +
        "    \"params\" : null,\n" +
        "    \"dataSet\" : {\n" +
        "      \"training\" : \"data/MQ2008/Fold1/train.txt\",\n" +
        "      \"validation\" : \"data/MQ2008/Fold1/vali.txt\",\n" +
        "      \"test\" : \"data/MQ2008/Fold1/test.txt\"\n" +
        "    },\n" +
        "    \"model\" : {\n" +
        "      \"format\" : \"json\",\n" +
        "      \"file\" : \"model/prank-model.json\"\n" +
        "    },\n" +
        "    \"evaluation\" : {\n" +
        "      \"evaluator\" : \"NDCG\",\n" +
        "      \"params\" : {\n" +
        "        \"k\" : 10\n" +
        "      }\n" +
        "    },\n" +
        "    \"report\" : {\n" +
        "      \"format\" : \"csv\",\n" +
        "      \"file\" : \"report/prank-report.csv\"\n" +
        "    }\n" +
        "  },\n" +
        "  \"weights\" : [ 1.0, 2.0, 3.0, 4.0, 5.0 ],\n" +
        "  \"thresholds\" : [ 15.0, 19.0 ]\n" +
        "}";

    StringReader reader = new StringReader(oapMod);
    Ranker oap = Ranker.RankerFactory.getFromModel("oap", reader);
    Assert.assertTrue(oap instanceof PRankTrainer.PRank);
  }

  @Test
  public void rankerFactoryGetNN() throws Exception {
    String nnMod = "{\n" +
        "  \"config\" : {\n" +
        "    \"algorithm\" : \"NNRank\",\n" +
        "    \"numIterations\" : 100,\n" +
        "    \"batchSize\" : 10,\n" +
        "    \"params\" : {\n" +
        "      \"learningRate\" : 1.0E-5,\n" +
        "      \"optimizer\" : \"adam\",\n" +
        "      \"weightInit\" : \"xavier\",\n" +
        "      \"regularization\" : {\n" +
        "        \"regularizer\" : \"L1\",\n" +
        "        \"rate\" : 0.01\n" +
        "      },\n" +
        "      \"layers\" : [ {\n" +
        "        \"activator\" : \"Sigmoid\",\n" +
        "        \"num\" : 15\n" +
        "      }, ]\n" +
        "    },\n" +
        "    \"dataSet\" : {\n" +
        "      \"training\" : \"data/MQ2008/Fold1/train.txt\",\n" +
        "      \"validation\" : \"data/MQ2008/Fold1/vali.txt\",\n" +
        "      \"test\" : \"data/MQ2008/Fold1/test.txt\"\n" +
        "    },\n" +
        "    \"model\" : {\n" +
        "      \"format\" : \"json\",\n" +
        "      \"file\" : \"model/nnrank-model.json\"\n" +
        "    },\n" +
        "    \"evaluation\" : {\n" +
        "      \"evaluator\" : \"NDCG\",\n" +
        "      \"params\" : {\n" +
        "        \"k\" : 10\n" +
        "      }\n" +
        "    },\n" +
        "    \"report\" : {\n" +
        "      \"format\" : \"csv\",\n" +
        "      \"file\" : \"report/nnrank-report.csv\"\n" +
        "    }\n" +
        "  },\n" +
        "  \"weights\" : [ [ [ 1.0, 2.0, 3.0, 4.0 ], [ 1.0, 5.0, 6.0, 7.0], [ 1.0, 8.0, 9.0, 10.0 ] ], [ [ 1.0, 2.0, 3.0 ], [ 1.0, 2.0, 3.0 ], [ 1.0, 2.0, 3.0 ], [ 1.0, 2.0, 3.0 ] ] ]" +
        "}";

    StringReader reader = new StringReader(nnMod);
    Ranker nn = Ranker.RankerFactory.getFromModel("nnrank", reader);
    Assert.assertTrue(nn instanceof NNMLP);
  }

  @Test
  public void rankerFactoryGetRankNet(){
    String ranknetMod = "{\n" +
        "  \"config\" : {\n" +
        "    \"algorithm\" : \"RankNet\",\n" +
        "    \"numIterations\" : 100,\n" +
        "    \"batchSize\" : 10,\n" +
        "    \"params\" : {\n" +
        "      \"learningRate\" : 1.0E-5,\n" +
        "      \"optimizer\" : \"adam\",\n" +
        "      \"weightInit\" : \"xavier\",\n" +
        "      \"regularization\" : {\n" +
        "        \"regularizer\" : \"L2\",\n" +
        "        \"rate\" : 0.01\n" +
        "      },\n" +
        "      \"layers\" : [ {\n" +
        "        \"activator\" : \"Sigmoid\",\n" +
        "        \"num\" : 10\n" +
        "      } ]\n" +
        "    },\n" +
        "    \"dataSet\" : {\n" +
        "      \"training\" : \"data/MQ2008/Fold1/train.txt\",\n" +
        "      \"validation\" : \"data/MQ2008/Fold1/vali.txt\",\n" +
        "      \"test\" : \"data/MQ2008/Fold1/test.txt\"\n" +
        "    },\n" +
        "    \"model\" : {\n" +
        "      \"format\" : \"json\",\n" +
        "      \"file\" : \"model/ranknet-model.json\"\n" +
        "    },\n" +
        "    \"evaluation\" : {\n" +
        "      \"evaluator\" : \"map\",\n" +
        "      \"params\" : {\n" +
        "        \"k\" : 10\n" +
        "      }\n" +
        "    },\n" +
        "    \"report\" : {\n" +
        "      \"format\" : \"csv\",\n" +
        "      \"file\" : \"report/ranknet-report.csv\"\n" +
        "    }\n" +
        "  },\n" +
        "  \"weights\" : [ [ [ 0.0017051564993876703, 0.005077349746418424, 0.009556125980402001, 0.005568526722242471, -3.823846547286138E-4, 0.003735094212986644, 1.2830568958067425E-4, 1.924652796814746E-4, -0.002479031277674815, -0.0017637528290790185, 0.0013858797149532268, 0.008737268113563092, 0.0040891104187811955, -2.1319334612927233E-4, -5.747739398054958E-4, 0.007039210125212763, 0.0010536875409865195, 0.00713049398530738, -0.005748873603449065, -0.004319715159560238, 0.0026005087459226484, 0.008315584649381176, 0.004681587469775332, 0.012301035206686605, 0.0093931280342585, 0.002345442931286881, 0.007815590472009715, 0.0057504147570240065, 0.005198789787515675, 0.006921859283796152, 0.008466922742482334, 0.00530207638978974, 0.006932437267894725, 0.0042297390622818174, 0.002142357136119394, 0.0011379683166344075, 6.450525629260708E-5, 0.0063695882587756145, 0.005273672213046188, 0.006810740451203809, 0.006636920882514934, -0.0045798897570925885, -0.0037600402470963756, -0.002431704528794047, 0.0012386255540568893, 0.0015913956884872089, 0.003189146906197261 ], [ 0.002131479696459774, 5.159659583839533E-4, 0.002504130584728356, 0.004999014291768024, 0.001284210096412231, 0.008274305124289328, -1.9252139143283186E-4, 0.0024515175995304707, -2.645707486395114E-4, -7.175726424897286E-4, 0.002853538898904533, 0.004827559402036743, 0.004532593003270562, 0.005165075898630313, 6.393242228252363E-4, 0.0047709637332051195, 3.2634789118341395E-4, 0.002255095677255101, -0.0011757911442746157, -0.003012976150245363, 6.166786501125468E-4, 0.006088140677288533, 0.007816266331330684, 0.0017736368151116872, 0.0031543346758175416, 0.0030537617883403716, 0.007134108787749181, 0.005791014942099432, 0.006441519412356422, 0.004931157860016768, 0.00557428553240514, 0.004411051230255179, 0.006338459172064221, 0.0040782131725515675, -0.002163722752340391, 7.183630530516713E-4, 0.0014809170361981257, 0.004980078810022915, 0.00615668551894385, 0.00527479282504721, 0.004170119849795665, -0.00306281087033514, -0.008639140900396467, -0.0021043519471863757, 9.208611826178332E-4, -3.2470594671247296E-4, -8.723484460143315E-4 ], [ 0.0178508983324466, -0.004985267938721381, -0.006316496176449784, -0.0035416750477454554, 4.744946143055102E-4, -0.002826437205332762, 0.0026134307716565606, -0.0018172935004898915, -0.0010335670826696146, -1.2590397471573582E-4, -2.3069402114494263E-4, -0.005302173367298667, -0.008368334000664593, -0.0038108457114512037, -7.549772354841165E-4, -0.008063957313542614, -0.005036648287273536, 0.001262684259238434, 7.362756955919028E-4, 0.004455591625486754, -0.0018436268660716993, -0.00524299607352548, -0.009785349115689889, -0.009269793466621396, -0.008584529371984546, -0.002853308515458032, -0.004243006241948313, -0.009287920062716172, -0.007710760711064452, -0.005958863493530608, -0.008248222578216172, -0.0077028423993574175, -0.0024894258163359433, -0.0028100452492280078, 7.434195854633017E-4, -5.299231462896684E-5, -0.00540818071995609, -0.006718075801578333, -0.0049486885312504305, -0.008734281574424952, -0.005211261876521546, 0.0024140845947399807, 0.004832843300177744, -0.0019484623547831221, 1.596384820248689E-4, -0.001932240332987687, -3.8088281567863773E-4 ], [ 0.017418183692592654, -0.005946768047638425, -0.004578100356146686, -0.005128575735005222, 1.3293357463296484E-4, -0.0027872176028214328, -0.004206130777557281, -0.0013834327862863526, 0.002665457066189151, -0.005628832136139795, 0.0025816725017632223, -0.0023570432122099073, -0.009317720799579064, -0.005850178849824196, -0.004037600746305489, -0.0030050558120644035, 3.9375739834204116E-4, -0.0014488138880481654, -2.510374850061227E-4, 0.001021596265452969, -0.005436477461995628, -0.002526242729558914, -0.0068740078667163425, -0.008691463835010044, -0.0014131962216934464, -0.003321368007091281, -0.006608880849497217, -0.006731214355190261, -0.003619089604627263, -0.008653874728359734, -0.006043986075597068, -0.009200798537100914, -0.0049689918527073785, -0.0017428947117555066, -5.393533406570749E-4, -0.002033456550787019, -0.003146162250468424, -0.0062553573437789094, -0.006914519959113239, -0.006759138076210685, -0.00858168417685398, -3.39338416911908E-4, 0.004744649871120316, -0.0034378099276557595, 0.0022824046921125283, -0.0020946771671930355, -0.0015775714719383864 ], [ 0.0021672794483045244, 0.005949617979880958, 0.004614237186703073, 0.004115003866311874, -4.665002664329822E-4, 0.0037749486410136464, 1.881524176096905E-5, -0.004072933342786099, -0.005257634901199188, -2.074748753840381E-4, 0.00409413769883369, 0.005615366787790909, 0.0067573558117759325, 0.002153902876393426, 0.0016309150993774073, -1.4908684800235138E-4, 0.003390327582344153, 0.0029128277910011346, 5.621877305838799E-4, 7.183825344066701E-4, -3.5386342885606676E-4, 0.0037745639204830473, 0.0036423288159906776, 0.006837231412507055, 0.006872795588462262, 0.0066681071689920325, 4.43007554374634E-4, 0.006343035170498919, 0.00547658144729556, 0.005489814141990868, 0.008888990242333415, 0.0035313149761706315, 0.002584733238715298, 3.329249076977092E-5, 0.003868797421377967, -0.0011053187022182112, 4.4241726367439803E-4, 0.0026630774982368734, 0.008068667691714965, 0.0029107792798040207, 0.0033819992194969828, -0.004207728988428261, -0.0023490872933131035, -5.7896157887898464E-5, -0.0019446543524686594, -0.003674212268036334, -0.002385626866663141 ], [ 0.0019909816849409926, 0.008041133179566135, 0.00827929719187856, 0.005397295296717025, 0.0012297373164240793, 0.004362286090825735, -6.689373420192875E-4, -5.656147596558872E-4, -0.0019052276809492143, -0.003514201834327744, 0.0023286492552704067, 0.0036212867777316925, 0.005862209866101512, 0.0028661416831616045, 5.027070389836566E-5, 0.004810411395240348, 0.002620943093495829, 0.007327994051260392, 3.004016258921324E-4, -0.0022940316935095902, 0.0017272909555489037, 0.00292583566939695, 0.0039638467367282505, 0.003442515094054837, 0.0060112586709027685, 0.005579937347349339, 0.003656838431651704, 0.005972642071627484, 0.005416883295916015, 0.0022316468227381266, 0.0075556083952833045, 0.008616902501961255, 0.004602406258461114, 0.004826845181013182, 6.599926090291837E-4, 0.0011888385890953697, 0.004183521653727613, 0.006034193568105182, 0.00452843657629155, 0.006901608712268441, 0.0055261017128156965, -0.0025682707944304963, -0.005517861348421538, 0.0013459369634786075, -0.0026040041019491545, 0.002254080519148041, 0.0031778631027699006 ], [ 0.016438950887213657, -0.004534629050977526, -0.007962139831590328, -0.004780854894628165, 9.356445131698427E-4, -0.0020035220862091373, -0.0017223125850707288, -0.002786107197496895, 0.001109000356629293, 0.001414702475023043, 0.0012066087940734494, -0.003622470048429344, -0.005976567827510579, -0.0017990849710311921, -0.005461829213226115, -0.007181643681250523, -0.0050078322939386575, -0.0015982960886475135, 0.0010120045040066074, 0.0051961835102786, -0.0028143148766022292, -0.004387142652449271, -0.008317272787728364, -0.008218650858527897, -0.00414738353487463, -0.0036381278298135834, -0.005528243312608184, -0.0032755947097848938, -0.0035889424822062774, -0.0020141880584264834, -0.006441654778586783, -0.006422133829051303, -0.0055267686869673455, -0.004958322523983321, -0.0019212604793059076, -0.0038873894898231354, -0.002465009189834518, -0.0038625405119730553, -0.009603356919833638, -0.002052981852469597, -0.009520095881202091, 0.003347029958040544, 0.004892606505495941, -0.0023800106686850593, 0.0013762799436016849, -0.0017882576669485347, 6.927165071784724E-4 ], [ 0.003176672208848094, -0.0014689068556980106, 0.008042500699668595, 0.003552490119528055, -6.451794889393587E-5, 0.0057180565540825845, 9.690366026325326E-4, -0.0030860963468919275, -5.372756621740678E-4, -0.001963701892734653, 0.0012686436699472718, 0.004143467920291434, 0.003465202378974967, 0.007494811433211707, -0.0010262839742963999, 0.001942908024482122, 0.0011614519050925551, -4.018013197829175E-4, -8.048911418713115E-4, -0.006136861482732469, -0.0016591905298625653, 0.0031857960811009583, 0.005002051680306815, 0.0038861535772934473, 0.0038457397486576336, 0.002595547116033356, 0.002830334221091625, 0.004435950025048765, 0.007173685916859338, 0.004451241062119873, 0.004490177443188681, 0.001865733555238102, 0.0032421659037307833, 0.0014121416467639371, 0.0016442916776301772, 0.005507927778534628, -0.0011086139898072494, 0.005237812128394495, 0.004910960572561403, 0.006306121975856214, 0.003848372075655517, 0.0017896745295520409, -0.003671620824127521, 1.9461867041780813E-4, 9.386687174481055E-5, 4.448716157229439E-4, 0.00254234754021465 ], [ 0.0020602135994464937, 0.0034712492576709658, 0.002369745480351675, 5.691045130857777E-4, -3.892167044727705E-4, -0.0014368887456859094, 0.0019898209627139665, -0.0015740274332454176, 2.1746355556748092E-4, 5.207723230500644E-4, -0.004004387092355937, 0.006045779822451946, 0.005952503092071983, 0.007626309103139834, 0.0029999480190259662, 0.004874448707717879, 0.003075114104557776, 7.607551305213158E-4, 0.0011120711504843761, -0.0029838340736187746, -5.224290497309299E-4, 0.006946865604612072, 0.00503990102683632, 0.006779612476912917, 0.004681012884882604, 0.004818413801236336, 0.0017698201875391258, 0.007170502125934934, 0.003022329145720638, 0.0020039077634755203, 0.0040326242270665065, 0.00563555734293833, 0.004411595667735946, -3.857186587996728E-4, 0.005203285141245352, 0.0020129502856363365, -2.4335852738854846E-4, 0.005701832882778617, 0.008644264810151623, 0.0032799172560975306, 0.005535543308505117, -4.224409189095845E-4, -0.005051171452006555, -0.0010042010500846664, 0.003737384124044793, -0.0031039776394022243, 0.0018003361826874076 ], [ 0.01505129347675908, -0.003217148534351828, -0.004370435256946914, -0.004226048187991732, 0.0017597027727538647, -0.0016845266966419763, 6.822523336855325E-4, 0.0012946306563368592, -5.859025319954584E-4, 0.0033104052908508293, -0.0026229457846012588, -0.006428838271409849, -0.007104899814133689, -0.005133434335391949, -0.005879455552839476, -0.0030871812587252552, -0.0032505155777654586, -0.0019540968207780664, -9.87128611305763E-4, 0.008013125322468598, -2.14914447333186E-4, -0.005399895900780274, -0.008879884410600261, -0.005344548271872153, -0.001775083511354007, -0.004372179837567172, -0.003911730617078261, -0.004666801111239196, -0.005147150553995877, -0.006235335897858132, -0.0077653149192036496, -0.00654698525366253, -0.0067166102797856665, -0.0025457422445470815, -0.002810517416077599, 6.489123159131628E-4, -0.001107843994428336, -0.004197309044656741, -0.0010187002324224305, -0.008220588614236097, -0.006570258087374898, 0.005986748947094912, 0.004717987808506469, 0.001252636638061352, 5.76488026949397E-5, -0.001056234547784597, -0.0013739029981222714 ] ], [ [ 0.009999335022077518, 0.006068825320330716, 0.008357393487310386, -0.006271892234118932, -0.006920155015892252, 0.01098775817094946, 0.008029880550726244, -0.006809945249608074, 0.007060799038963369, 0.009033355845928246, -0.007441520835924173 ] ] ]\n" +
        "}";

    StringReader reader = new StringReader(ranknetMod);
    Ranker ranknet = Ranker.RankerFactory.getFromModel("ranknet", reader);
    Assert.assertTrue(ranknet instanceof RankNetMLP);
  }

}